# .env - Smart Elections Parser Configurations
# These environment variables are loaded at runtime using `python-dotenv`
# Keep this file PRIVATE and excluded from version control (see .gitignore)

# ----------------------------
# Browser Configuration
# ----------------------------

# How to set up a flask key
# python -c "import secrets; print(secrets.token_hex(32))"
# .env are not committed to github and filtered out by .gitignore

FLASK_SECRET_KEY=your-very-long-random-string
FLASK_COOKIE_SECURE=False  # Set to True in production with HTTPS

# Options: chrome, msedge
BROWSER=msedge

# Run browser in headless mode? (true/false)
HEADLESS=false

# Time it takes for webpage to render before html_scan runs
SCAN_WAIT_SECONDS=7

# If set to true, auto-refresh browser on CAPTCHA screen (not always reliable)
AUTO_REFRESH_ON_CAPTCHA=false

# Time (in seconds) to wait before refreshing page after CAPTCHA is detected
CAPTCHA_REFRESH_DELAY=8

# Launch browser minimized if no CAPTCHA is detected
LAUNCH_MINIMIZED=true

# ----------------------------
# CAPTCHA Handling
# ----------------------------

# Toggle CAPTCHA detection and handling
CAPTCHA_DETECTION_ENABLED=true

# Allow dynamic exit from headless when CAPTCHA is detected (forces window to appear)
ELEVATE_ON_CAPTCHA=true

# Max time (in seconds) to wait for CAPTCHA resolution
CAPTCHA_TIMEOUT=120

# ----------------------------
# User-Agent Rotation
# ----------------------------

# Rotate through randomized user agents to reduce fingerprinting
USER_AGENT_ROTATION=true

# Optional: Provide your own comma-separated user agents (leave empty to use built-in pool)
CUSTOM_USER_AGENTS=

# ----------------------------
# Parser Behavior
# ----------------------------
#List of supported formats for parsing(HTML is the default)
SUPPORTED_FORMATS=.pdf,.csv,.json
# Automatically detect election format (PDF, CSV, JSON)
FORMAT_DETECTION_ENABLED=false
# Keywords to add to the header for outut CSV files
CSV_HEADER_KEYWORDS=precinct,votes,candidate
PDF_HEADER_KEYWORDS=precinct,votes,candidate,early,absentee,provisional
JSON_HEADER_KEYWORDS=votes,candidate,early,absentee,provisional
#Set it to "false" to skip OCR fallback entirely
ENABLE_OCR=true

#Attempts OCR scans the PDF format for clearer results
OCR_ATTEMPTS=3
OCR_CONFIDENCE_THRESHOLD=30
OCR_WARN_THRESHOLD=35
OCR_MAX_RETRIES=1
OCR_SHOW_HEATMAP=true
EXPORT_PARSED_TEXT=true
USE_PDFPLUMBER=true
# Force re-scan of all HTML before proceeding
FORCE_HTML_SCAN=true
FUZZY_MATCH_CUTOFF=0.7

# Enable multiprocessing for batch mode(experimental function/future utilization - false by default)
ENABLE_PARALLEL=false

# Limit contests shown (useful for debugging)
MAX_CONTESTS_DISPLAYED=15

# Adjust the threshold for toggling elements for clicking
TOGGLE_SCORE_THRESHOLD=1.0

# true for long (tidy) format (one row per candidate/precinct/method)
# false (or remove it) for wide format (one row per precinct, candidates as columns).
OUTPUT_LONG_FORMAT=false

# Toggle if timestamp shows on csv output
APPEND_TIMESTAMP=true
INCLUDE_TIMESTAMP_IN_FILENAME=true
# ----------------------------
# Logging and Debugging
# ----------------------------

# Control verbosity: DEBUG, INFO, WARNING, ERROR
LOG_LEVEL=DEBUG
LOG_WARNINGS=false
LOG_REDACTION_LEVEL=WARNING  # Options: DEBUG, INFO, WARNING, ERROR

# Save raw HTML snapshots when scanning
SAVE_HTML_DUMPS=false

# Save browser session screenshots on errors
SAVE_SCREENSHOTS_ON_ERROR=true

# Enable/disable saving CSVs at all
WRITE_CSV=true

# Timeout for page load or scanner stage
PAGE_LOAD_TIMEOUT=60

# Toggle .processed_urls caching directly
CACHE_PROCESSED=true
CACHE_RESET=false

# Limit how many URLs show up in the selection (useful in testing)
MAX_URLS_DISPLAYED=10

# Default file output folder override
OUTPUT_BASE_DIR=output

## Only for use with OPENAI integrated bot
## Manual_Correction.py only bot available at the moment
OPENAI_API_KEY=<your-openai-api-key> ## <-- Remove the <> brackets
# Not needed for main parser or manual correction bot base ML
ANTHROPIC_API_KEY=<your-anthropic-api-key> ## <-- Remove the <> brackets
# ----------------------------
# run `pip install openai` to install the OpenAI Python client library
# run `pip install anthropic` to install the Anthropic Python client library
SKIP_BOT_TASKS=true
REVIEW_WITH_MANUAL_BOT=false