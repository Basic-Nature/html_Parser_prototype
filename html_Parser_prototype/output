# filepath: c:\Users\olivi\OneDrive\Desktop\html_Parser_prototype\webapp\parser\html_election_parser.py

from playwright.sync_api import Page
from .state_router import get_handler_from_context
from .utils.html_scanner import scan_html_for_context, get_detected_races_from_context
from .utils.contest_selector import select_contest
from .utils.table_builder import extract_table_data
from .utils.shared_logger import logger
from .utils.output_utils import finalize_election_output
from .utils.user_prompt import prompt_user_input
import re

def orchestrate_parsing(page: Page, html_context=None):
    """
    Orchestrates the entire election data parsing pipeline.
    """
    # Step 1: Scan the page for context and races
    context = scan_html_for_context(page)
    if html_context is None:
        html_context = context
    else:
        html_context.update(context)

    # Step 2: Delegate to state/county handler if available
    state_handler = get_handler_from_context(
        state=html_context.get("state"),
        county=html_context.get("county")
    )
    if state_handler and hasattr(state_handler, "parse"):
        logger.info("[INFO] Delegating to state handler for parsing.")
        return state_handler.parse(page, html_context)

    # Step 3: Let user select contest if not already set
    contest_title = html_context.get("selected_race")
    if not contest_title:
        contest_title = select_contest_from_detected_races(html_context)
        if not contest_title:
            logger.warning("[WARN] No contest selected. Exiting parsing.")
            return

    # Step 4: Extract tables and data
    precinct_tables = extract_precinct_tables(page, contest_title)
    if not precinct_tables:
        logger.warning("[WARN] No precinct tables found. Exiting parsing.")
        return

    # Step 5: Process each precinct table
    all_data = []
    for precinct_name, table_element in precinct_tables:
        headers, data = extract_table_data(table_element)
        all_data.extend(data)

    # Step 6: Finalize output
    if all_data:
        metadata = {
            "state": html_context.get("state"),
            "county": html_context.get("county"),
            "contest_title": contest_title
        }
        headers = list(all_data[0].keys())  # Assuming all rows have the same structure
        finalize_election_output(headers, all_data, contest_title, metadata)
    else:
        logger.warning("[WARN] No data extracted from precinct tables.")

def select_contest_from_detected_races(html_context):
    """
    Prompts the user to select a contest from detected races.
    """
    detected_races = get_detected_races_from_context(html_context)
    if detected_races:
        return select_contest(detected_races)
    else:
        logger.warning("[WARN] No detected races available for selection.")
        return None

def extract_precinct_tables(page: Page, contest_title: str):
    """
    Extracts precinct tables from the contest panel.
    """
    panel = extract_contest_panel(page, contest_title)
    if panel:
        return extract_precinct_tables(panel)
    else:
        logger.warning(f"[WARN] Contest panel for '{contest_title}' not found.")
        return []

def extract_contest_panel(page: Page, contest_title: str):
    """
    Returns a Playwright Locator for the contest panel matching contest_title.
    """
    # Implementation of extracting the contest panel goes here
    # This function should return the panel element if found
    pass

# Main execution point for the script
if __name__ == "__main__":
    # Assuming a Playwright context is already set up
    with sync_playwright() as playwright:
        browser = playwright.chromium.launch(headless=False)
        page = browser.new_page()
        page.goto("URL_TO_ELECTION_PAGE")  # Replace with the actual URL
        orchestrate_parsing(page)
        browser.close()